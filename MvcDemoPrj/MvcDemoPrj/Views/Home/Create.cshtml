@model MvcDemoPrj.Models.SI_ResearcherVisit
@*@model MvcDemoPrj.Models.ViewModel.CreateViewModel*@

@{

    var ReportList = ViewBag.Report;
    var ReportType_BS = ViewBag.ReportType_BS;
    var ReportTypeMemo = ViewBag.ReportTypeMemoList;
}
@Html.AntiForgeryToken()


<div id="content">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <!-- 顯示登入角色-->
    <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
        <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
            <i class="fa fa-bars"></i>
        </button>
        <from class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
            個人績效新增
        </from>
        <ul class="navbar-nav ml-auto">
            <li class="nav-item dropdown no-arrow d-sm-none">
                <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    個人績效新增
                </a>
            </li>
            <li class="nav-item dropdown no-arrow">
                <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="mr-2 d-none d-lg-inline text-gray-600 small">Valerie Luna</span>
                    <img class="img-profile rounded-circle" src="https://source.unsplash.com/QAB-WJcbgJk/60x60">
                </a>
                <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                    <a class="dropdown-item" href="#">
                        <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                        Profile
                    </a>
                    <a class="dropdown-item" href="#">
                        <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                        Settings
                    </a>
                    <a class="dropdown-item" href="#">
                        <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                        Activity Log
                    </a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                        <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                        Logout
                    </a>
                </div>
            </li>
        </ul>
    </nav>
    <!-- 顯示登入角色-->

    <div class="container-fluid">

        <div class="card shadow mb-4">
            <div class="card-header py-3 form-inline">
                <button class="btn btn-primary btn-sm m-1 col-sm-1" id="Send" type="button">送出</button>
                @*@Html.ActionLink("新增", "Create", "Home", new { }, new { @class = "btn btn-primary btn-sm m-1 col-sm-1" })*@
            </div>
            <div class="card-body">

                @*<div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.Seq, htmlAttributes: new { @class = "control-label " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.Seq, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Seq, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                <p />
                <div  class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.DataDate, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        @Html.EditorFor(model => model.DataDate, new { htmlAttributes = new { @class = "form-control",  placeholder = "請選擇" } })
                        @Html.ValidationMessageFor(model => model.DataDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <p />
                <div id="CompanyId" class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        @Html.EditorFor(model => model.CompanyId, new { htmlAttributes = new { @class = "form-control"} })
                        @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <p />
                <div id="CompanyName" class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control"} })
                        @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <p />
                <div  class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.ReportType, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        <select class="selectpicker form-control" data-live-search="true" id="ReportType" name="ReportType">
                            <option value="">全部</option>
                            @for (int i = 0; i < ReportList.Count; i++)
                            {
                                <option value="@ReportList[i].Item_Code">@ReportList[i].Item_Name</option>
                            }
                        </select>
                        @*@Html.EditorFor(model => model.ReportType, new { htmlAttributes = new { @class = "form-control", id = "ReportType" } })
                            @Html.ValidationMessageFor(model => model.ReportType, "", new { @class = "text-danger" })*@
                    </div>
                </div>
                <p />

                @*下拉選單連動*@
                <div id="StockReport" style="display:none">

                    <div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.CompanyId, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.CompanyId, new { htmlAttributes = new { @class = "form-control"} })
                            @Html.ValidationMessageFor(model => model.StocksReport.CompanyId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.CompanyName, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.CompanyName, new { htmlAttributes = new { @class = "form-control"} })
                            @Html.ValidationMessageFor(model => model.StocksReport.CompanyName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.CapitalStock, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.CapitalStock, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.CapitalStock, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.ClosePrice, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.ClosePrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.ClosePrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.ReportType_BS, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            <select class="selectpicker form-control" data-live-search="true" id="ReportType_BS" name="ReportType_BS">
                                <option value="">全部</option>
                                @for (int i = 0; i < ReportType_BS.Count; i++)
                                {
                                    <option value="@ReportType_BS[i].Item_Code">@ReportType_BS[i].Item_Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <p />
                    <div id="Buy_Price" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.Buy_Price, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.Buy_Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.Buy_Price, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div  id="Sell_Price" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.Sell_Price, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.Sell_Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.Sell_Price, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div id="Targetprice" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.Targetprice, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.Targetprice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.Targetprice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div id="Reason" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.Reason, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.Reason, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.Reason, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p/>
                    <div id="ReasonMemo" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @*@Html.LabelFor(model => model.StocksReport.Reason, htmlAttributes: new { @class = "control-label  " })*@
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            <select class="selectpicker form-control" data-live-search="true" id="ReportTypeMemo_BS" name="ReportTypeMemo_BS">
                                <option value="">全部</option>
                                @for (int i = 0; i < ReportTypeMemo.Count; i++)
                                {
                                    <option value="@ReportTypeMemo[i].Item_Code">@ReportTypeMemo[i].Item_Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <p />
                    <div id="PER" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.PER, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.PER, new { htmlAttributes = new { @class = "form-control"} })
                            @Html.ValidationMessageFor(model => model.StocksReport.PER, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div id="PBR" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.PBR, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.PBR, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.PBR, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div id="EPS_ThisYear" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.EPS_ThisYear, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.EPS_ThisYear, new { htmlAttributes = new { @class = "form-control"} })
                            @Html.ValidationMessageFor(model => model.StocksReport.EPS_ThisYear, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                    <div id="EPS_NextYear" class="row">
                        <div class="col-xs-12 col-sm-2">
                            @Html.LabelFor(model => model.StocksReport.EPS_NextYear, htmlAttributes: new { @class = "control-label  " })
                        </div>
                        <div class="col-xs-12 col-sm-10">
                            @Html.EditorFor(model => model.StocksReport.EPS_NextYear, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StocksReport.EPS_NextYear, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p />
                   

                    

                    @*<div class="row">
                            <div class="col-xs-12 col-sm-2">
                                @Html.LabelFor(model => model.StocksReport.CreateUser, htmlAttributes: new { @class = "control-label  " })
                            </div>
                            <div class="col-xs-12 col-sm-10">
                                @Html.EditorFor(model => model.StocksReport.CreateUser, new { htmlAttributes = new { @class = "form-control", id = "EmpNameY" } })
                                @Html.ValidationMessageFor(model => model.StocksReport.CreateUser, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-2">
                                @Html.LabelFor(model => model.StocksReport.CreateUser, htmlAttributes: new { @class = "control-label  " })
                            </div>
                            <div class="col-xs-12 col-sm-10">
                                @Html.EditorFor(model => model.StocksReport.CreateUser, new { htmlAttributes = new { @class = "form-control", id = "EmpNameY" } })
                                @Html.ValidationMessageFor(model => model.StocksReport.CreateUser, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                </div>
                <p/>
                <div id="CreateUser" class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.StocksReport.CreateUser, htmlAttributes: new { @class = "control-label  " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        @Html.EditorFor(model => model.StocksReport.CreateUser, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StocksReport.CreateUser, "", new { @class = "text-danger" })
                    </div>
                </div>
                <p />
                <div id="CreateDate" class="row">
                    <div class="col-xs-12 col-sm-2">
                        @Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div class="col-xs-12 col-sm-10">
                        @Html.EditorFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control", @Value= ViewBag.CreateDate, disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.CreateDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">

    $('#ReportType').on('change', function () {
        
        //if (this.value == 2 || this.value==3) {
        //    $("#StockReport").show();
        //} else {
        //    $("#StockReport").hide();
        //}
        alert(this.value)

        switch (this.value) {
            case "1":
                $("#StockReport").hide();
                $("#CompanyId").show();
                $("#CompanyName").show();
                break;
            case "2":
                $("#StockReport").show();
                $("#CompanyId").show();
                $("#CompanyName").show();
                break;
            case "3":
                $("#StockReport").show();
                $("#CompanyId").show();
                $("#CompanyName").show();
                break;
            case "4":
                $("#StockReport").hide();
                $("#CompanyId").hide();
                $("#CompanyName").hide();
                break;
            default:
                $("#StockReport").hide();
                $("#CompanyId").show();
                $("#CompanyName").show();
        }
    });

    $('#ReportType_BS').on('change', function () {
        //alert(this.value);
        switch (this.value) {
            case 'B':
                $("#Buy_Price").show();
                $("#Targetprice").show();
                $("#Reason").show();
                $("#EPS_ThisYear").show();
                $("#EPS_NextYear").show();
                $("#PER").show();
                $("#PBR").show();

                $("#Sell_Price").hide();
                $('#ReasonMemo').hide();
                break;
            case 'R':
                $("#EPS_ThisYear").show();
                $("#EPS_NextYear").show();
                $("#PER").show();
                $("#PBR").show();

                $("#Sell_Price").hide();
                $("#Reason").hide();
                $('#ReasonMemo').hide();
                $("#Buy_Price").hide();
                $("#Targetprice").hide();
                break;
            default:
                $("#Sell_Price").show();
                $("#Reason").show();
                $('#ReasonMemo').show();

                $("#Buy_Price").hide();
                $("#Targetprice").hide();
                $("#EPS_ThisYear").hide();
                $("#EPS_NextYear").hide();
                $("#PER").hide();
                $("#PBR").hide();
        }

        $('#ReportTypeMemo_BS').on('change', function () {
            $('#StocksReport_Reason').val($("#ReportTypeMemo_BS :selected").text());
        });

    });

    $('#Send').click(function () {
        var property1 = $('#mm').val();
        var PostCreate = [
            {
                DataDate: $('#DataDate').val(), CompanyId: $('#CompanyId').val()
                , CompanyName: $('#CompanyName').val(), ReportType: $('#ReportType').val()
                , EmpName: $('#StocksReport_CreateUser').val(), CreateDate: $('#CreateDate').val()
            }
        ];
        $.ajax({ //Do an ajax post to the controller
            type: 'POST',
            url: 'Create',
            data: JSON.stringify({ 'PostCreateViewModel': PostCreate }),
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        });

    });

    $('#query').click(function () {
        var url = '@Url.Action("Index", "Home")';
        var WHC_PayDate = $('#WHC_PayDate').val();
        var WHC_PayDate2 = $('#WHC_PayDate2').val();
        var EmpId = $('#city').val();
        window.location.href = url + '?startDate=' + WHC_PayDate + '&EndDate=' + WHC_PayDate2 + '&EmpId=' + EmpId;
    });

    $(function () {
        $('#DataDate').each(function () {
            $(this).datepicker({
                language: 'zh-CN', //語言
                autoclose: true, //選擇後自動關閉
                clearBtn: true,//清除按鈕
                format: "yyyy/mm/dd"//日期格式
            });
        });

        $('#WHC_PayDate2').each(function () {
            $(this).datepicker({
                language: 'zh-CN', //語言
                autoclose: true, //選擇後自動關閉
                clearBtn: true,//清除按鈕
                format: "yyyy/mm/dd"//日期格式
            });
        });


        $("#sidebarToggle, #sidebarToggleTop").on('click', function (e) {
            $("body").toggleClass("sidebar-toggled");
            $(".sidebar").toggleClass("toggled");
            if ($(".sidebar").hasClass("toggled")) {
                $('.sidebar .collapse').collapse('hide');
            };
        });

        // Close any open menu accordions when window is resized below 768px
        $(window).resize(function () {
            if ($(window).width() < 768) {
                $('.sidebar .collapse').collapse('hide');
            };
        });

        // Prevent the content wrapper from scrolling when the fixed side navigation hovered over
        $('body.fixed-nav .sidebar').on('mousewheel DOMMouseScroll wheel', function (e) {
            if ($(window).width() > 768) {
                var e0 = e.originalEvent,
                    delta = e0.wheelDelta || -e0.detail;
                this.scrollTop += (delta < 0 ? 1 : -1) * 30;
                e.preventDefault();
            }
        });

        // Scroll to top button appear
        $(document).on('scroll', function () {
            var scrollDistance = $(this).scrollTop();
            if (scrollDistance > 100) {
                $('.scroll-to-top').fadeIn();
            } else {
                $('.scroll-to-top').fadeOut();
            }
        });

        // Smooth scrolling using jQuery easing
        $(document).on('click', 'a.scroll-to-top', function (e) {
            var $anchor = $(this);
            $('html, body').stop().animate({
                scrollTop: ($($anchor.attr('href')).offset().top)
            }, 1000, 'easeInOutExpo');
            e.preventDefault();
        });

    });

</script>